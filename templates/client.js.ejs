// do not modify: this code is automatically generated

// api dependencies
var http = require('superagent');
var qs = require('qs');

var urlify = function(url, params) {
  var valid = true;
  var urlified = url.replace(/:(\/?)(\w+)(\??)/g, function(_, slash, param, optional) {
    if (!(param in params)) {
      if (optional) {
        return slash;
      }
      valid = false
      return slash + param;
    }
    return slash + encodeURIComponent(params[param]);
  });
  return valid ? urlified : null;
}

// api definition
var api = module.exports = {};
<% for (var name in endpoints) { %>
<% var endpoint = endpoints[name] %>
// <%= name %>()<% if (endpoint.help) { %>
// <%= endpoint.help %><% } %>
api.<%= name %> = function(ctx, opts, cb) {
  var url = urlify(this.config.getBase() + '<%= endpoint.url %>', opts);
  if (url === null) {
    return cb(new Error('Invalid url/parameters ' + url));
  }
  var method = '<%= endpoints[name].method.toLowerCase() %>';
  var xhr = http[method](url);
  xhr.set({
    'Content-Type': 'application/json',
    'X-Requested-With': 'XMLHttpRequest',
    'X-CSRF-Token': ctx.csrf
  });
  if (method === 'post' || method === 'put') {
    xhr.send(opts);
  } else {
    xhr.query(qs.stringify(opts));
  }
  xhr.end(function(err, response) {
    if (err) {
      return cb(err);
    }
    if (!response.ok || response.error) {
      return cb({
        error: response.error || {},
        clientError: response.clientError,
        serverError: response.serverError,
        accepted: response.accepted,
        noContent: response.noContent,
        unauthorized: response.unauthorized,
        notAcceptable: response.notAcceptable,
        forbidden: response.forbidden,
        notFound: response.notFound,
        status: response.status,
        statusCode: response.statusCode,
        domain: response.req.domain,
        method: response.req.method,
        path: response.req.path,
        text: response.text
      });
    }
    return cb(null, response.body);
  });
}
<% } %>
